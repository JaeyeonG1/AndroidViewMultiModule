package com.tambi.core.ui.base

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.annotation.LayoutRes
import androidx.databinding.DataBindingUtil
import androidx.databinding.ViewDataBinding
import androidx.databinding.library.baseAdapters.BR
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModel

/**
 * Base class for [Fragment] that bind content layout with [DataBindingUtil].
 *
 * @param B A generic class that both extends [ViewDataBinding] and generated by DataBinding on compile time.
 * @param VM A generic class extends [ViewModel]. The type of "[VM]" and "[B].viewModel" in the layoutRes must match.
 *
 * @property layoutResId Layout should contain "viewModel" variable to invoke [bindView] without error.
 */
abstract class BaseFragment<B : ViewDataBinding, VM : ViewModel> constructor(
    @LayoutRes private val layoutResId: Int
) : Fragment() {

    protected abstract val viewModel: VM

    /** A backing field for providing an immutable [binding] property. */
    private var _binding: B? = null

    /** Provides the inflated view which depends on [layoutResId]. */
    protected val binding
        get() = checkNotNull(_binding) {
            "$this :: binding cannot be accessed before onCreateView() and after onDestroyView()"
        }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = DataBindingUtil.inflate(inflater, layoutResId, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        bindView()
        initView()
    }

    /** Bind lifecycleOwner and viewModel, ready for use [binding] */
    private fun bindView() {
        with(binding) {
            lifecycleOwner = viewLifecycleOwner
            setVariable(BR.viewModel, viewModel)
        }
    }

    /**
     * Function to init view components which invokes after [bindView], so [binding] can be accessed
     * @see onViewCreated
     */
    abstract fun initView()

    /**
     * Unbind [_binding] to prevent memory leaks caused by [ViewDataBinding] that references [ViewDataBinding.mRoot]
     * By setting [_binding] null, prevent memory leak caused by life cycle of a fragment
     */
    override fun onDestroyView() {
        super.onDestroyView()
        _binding?.unbind()
        _binding = null
    }
}
