package com.tambi.core.ui.base

import android.os.Bundle
import androidx.annotation.LayoutRes
import androidx.appcompat.app.AppCompatActivity
import androidx.databinding.DataBindingUtil
import androidx.databinding.ViewDataBinding
import androidx.databinding.library.baseAdapters.BR
import androidx.lifecycle.ViewModel

/**
 * Base class for [AppCompatActivity] that bind content layout with [DataBindingUtil].
 *
 * @param B A generic class that both extends [ViewDataBinding] and generated by DataBinding on compile time.
 * @param VM A generic class extends [ViewModel]. The type of "[VM]" and "[B].viewModel" in the layoutRes must match.
 *
 * @property layoutResId Layout should contain "viewModel" variable to invoke [bindView] without error.
 */
abstract class BaseActivity<B : ViewDataBinding, VM : ViewModel> constructor(
    @LayoutRes private val layoutResId: Int
) : AppCompatActivity() {

    protected abstract val viewModel: VM

    /** A lazy field for providing an immutable [binding] property. */
    protected val binding: B by lazy(LazyThreadSafetyMode.NONE) {
        DataBindingUtil.setContentView(this, layoutResId)
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        bindView()
        initView()
    }

    /** Bind lifecycleOwner and viewModel, ready for use [binding] */
    private fun bindView() {
        with(binding) {
            lifecycleOwner = this@BaseActivity
            setVariable(BR.viewModel, viewModel)
        }
    }

    /**
     * Function to init view components which invokes after [bindView], so [binding] can be accessed
     * @see onCreate
     */
    abstract fun initView()

    /** Unbind [binding] to prevent memory leaks caused by [ViewDataBinding] that references [ViewDataBinding.mRoot] */
    override fun onDestroy() {
        super.onDestroy()
        binding.unbind()
    }
}
